"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Event Capture API
 * The Event Capture API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v0`. While the API does support a default version, that version will change over time and therefore should not be used in production code!
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractedElementV1ToJSON = exports.InteractedElementV1FromJSONTyped = exports.InteractedElementV1FromJSON = exports.InteractedElementV1TypeEnum = void 0;
const runtime_1 = require("../runtime");
/**
* @export
* @enum {string}
*/
var InteractedElementV1TypeEnum;
(function (InteractedElementV1TypeEnum) {
    InteractedElementV1TypeEnum["OrgOpenstaxEcInteractedElementV1"] = "org.openstax.ec.interacted_element_v1";
})(InteractedElementV1TypeEnum = exports.InteractedElementV1TypeEnum || (exports.InteractedElementV1TypeEnum = {}));
function InteractedElementV1FromJSON(json) {
    return InteractedElementV1FromJSONTyped(json, false);
}
exports.InteractedElementV1FromJSON = InteractedElementV1FromJSON;
function InteractedElementV1FromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'clientClockOccurredAt': (new Date(json['client_clock_occurred_at'])),
        'clientClockSentAt': (new Date(json['client_clock_sent_at'])),
        'type': json['type'],
        'sourceUri': json['source_uri'],
        'sessionUuid': json['session_uuid'],
        'sessionOrder': json['session_order'],
        'targetId': json['target_id'],
        'targetType': json['target_type'],
        'targetAttributes': json['target_attributes'],
        'targetStateChange': !runtime_1.exists(json, 'target_state_change') ? undefined : json['target_state_change'],
        'contextId': json['context_id'],
        'contextType': json['context_type'],
        'contextAttributes': json['context_attributes'],
        'contextRegion': !runtime_1.exists(json, 'context_region') ? undefined : json['context_region'],
    };
}
exports.InteractedElementV1FromJSONTyped = InteractedElementV1FromJSONTyped;
function InteractedElementV1ToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'client_clock_occurred_at': (value.clientClockOccurredAt.toISOString()),
        'client_clock_sent_at': (value.clientClockSentAt.toISOString()),
        'type': value.type,
        'source_uri': value.sourceUri,
        'session_uuid': value.sessionUuid,
        'session_order': value.sessionOrder,
        'target_id': value.targetId,
        'target_type': value.targetType,
        'target_attributes': value.targetAttributes,
        'target_state_change': value.targetStateChange,
        'context_id': value.contextId,
        'context_type': value.contextType,
        'context_attributes': value.contextAttributes,
        'context_region': value.contextRegion,
    };
}
exports.InteractedElementV1ToJSON = InteractedElementV1ToJSON;
