/**
 * OpenStax Event Capture API
 * The Event Capture API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v0`. While the API does support a default version, that version will change over time and therefore should not be used in production code!
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface InteractedElementV1
 */
export interface InteractedElementV1 {
    /**
     * The RFC 3339 section 5.6 date-time when event actually occurred.
     * @type {Date}
     * @memberof InteractedElementV1
     */
    clientClockOccurredAt: Date;
    /**
     * The RFC 3339 section 5.6 date-time when event was sent to the server.
     * @type {Date}
     * @memberof InteractedElementV1
     */
    clientClockSentAt: Date;
    /**
     * The data's type.
     * @type {string}
     * @memberof InteractedElementV1
     */
    type: InteractedElementV1TypeEnum;
    /**
     * client location when event occurred.
     * @type {string}
     * @memberof InteractedElementV1
     */
    sourceUri: string;
    /**
     * The UUID of the current session, previously generated by the client and submitted in a "session started" event.
     * @type {string}
     * @memberof InteractedElementV1
     */
    sessionUuid: string;
    /**
     * The event's numerical order within this session. E.g. the first event after a session is started should give 0 for this field, the next one should give 1, etc.
     * @type {number}
     * @memberof InteractedElementV1
     */
    sessionOrder: number;
    /**
     * The target element id.
     * @type {string}
     * @memberof InteractedElementV1
     */
    targetId: string;
    /**
     * The target element (interactive) type.
     * @type {string}
     * @memberof InteractedElementV1
     */
    targetType: string;
    /**
     * The target element attributes (map, all attributes).
     * @type {object}
     * @memberof InteractedElementV1
     */
    targetAttributes: object;
    /**
     * The target element state change that triggered event, if any.
     * @type {string}
     * @memberof InteractedElementV1
     */
    targetStateChange?: string;
    /**
     * The context element id for the target element (likely a parent: eg: if target is a solution, context would be problem).
     * @type {string}
     * @memberof InteractedElementV1
     */
    contextId: string;
    /**
     * The context element (parent) type.
     * @type {string}
     * @memberof InteractedElementV1
     */
    contextType: string;
    /**
     * The context element attributes (map, all useful attributes).
     * @type {object}
     * @memberof InteractedElementV1
     */
    contextAttributes: object;
    /**
     * The UX region the context element is in (e.g. toc, header, page).
     * @type {string}
     * @memberof InteractedElementV1
     */
    contextRegion?: string;
}
/**
* @export
* @enum {string}
*/
export declare enum InteractedElementV1TypeEnum {
    OrgOpenstaxEcInteractedElementV1 = "org.openstax.ec.interacted_element_v1"
}
export declare function InteractedElementV1FromJSON(json: any): InteractedElementV1;
export declare function InteractedElementV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): InteractedElementV1;
export declare function InteractedElementV1ToJSON(value?: InteractedElementV1 | null): any;
